/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MSWA Project API
 * API for managing currencies and countries with versioning support
 * OpenAPI spec version: 1.0.0
 */
import {
    useMutation,
    useQuery,
    type DataTag,
    type DefinedInitialDataOptions,
    type DefinedUseQueryResult,
    type MutationFunction,
    type QueryClient,
    type QueryFunction,
    type QueryKey,
    type UndefinedInitialDataOptions,
    type UseMutationOptions,
    type UseMutationResult,
    type UseQueryOptions,
    type UseQueryResult,
} from '@tanstack/react-query';

import { fetcher } from '../config/fetcher';
import type {
    BadRequestResponse,
    CreateCountryRequest,
    CreateCurrencyRequest,
    DeleteCountriesIsoCode200,
    DeleteCountriesIsoCodePathParameters,
    DeleteCurrenciesIsoCode200,
    DeleteCurrenciesIsoCodePathParameters,
    DeleteNotificationsId200,
    DeleteNotificationsIdPathParameters,
    ErrorResponse,
    GetCountries200,
    GetCountriesCurrencyCurrencyIsoCode200,
    GetCountriesCurrencyCurrencyIsoCodeParams,
    GetCountriesCurrencyCurrencyIsoCodePathParameters,
    GetCountriesIsoCode200,
    GetCountriesIsoCodeHistory200,
    GetCountriesIsoCodeHistoryParams,
    GetCountriesIsoCodeHistoryPathParameters,
    GetCountriesIsoCodePathParameters,
    GetCountriesParams,
    GetCurrencies200,
    GetCurrenciesIsoCode200,
    GetCurrenciesIsoCodeHistory200,
    GetCurrenciesIsoCodeHistoryParams,
    GetCurrenciesIsoCodeHistoryPathParameters,
    GetCurrenciesIsoCodePathParameters,
    GetCurrenciesParams,
    GetNotifications200,
    GetNotificationsEntityEntityTypeEntityIdentifier200,
    GetNotificationsEntityEntityTypeEntityIdentifierParams,
    GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    GetNotificationsId200,
    GetNotificationsIdPathParameters,
    GetNotificationsParams,
    GetNotificationsUnreadCount200,
    GetNotificationsUnreadCountParams,
    InternalServerErrorResponse,
    MarkAllAsReadRequest,
    MarkAsReadRequest,
    PostCountries201,
    PostCurrencies201,
    PutCountriesIsoCode200,
    PutCountriesIsoCodePathParameters,
    PutCurrenciesIsoCode200,
    PutCurrenciesIsoCodePathParameters,
    PutNotificationsMarkAllRead200,
    PutNotificationsMarkRead200,
    UpdateCountryRequest,
    UpdateCurrencyRequest,
} from './model';

/**
 * Retrieve a paginated list of all current (active) currencies
 * @summary List current currencies
 */
export const getCurrencies = (params?: GetCurrenciesParams, signal?: AbortSignal) => {
    return fetcher<GetCurrencies200>({ url: `/currencies`, method: 'GET', params, signal });
};

export const getGetCurrenciesQueryKey = (params?: GetCurrenciesParams) => {
    return [`/currencies`, ...(params ? [params] : [])] as const;
};

export const getGetCurrenciesQueryOptions = <
    TData = Awaited<ReturnType<typeof getCurrencies>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCurrenciesParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCurrenciesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrencies>>> = ({ signal }) =>
        getCurrencies(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCurrencies>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrenciesQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrencies>>>;
export type GetCurrenciesQueryError = BadRequestResponse | InternalServerErrorResponse;

export function useGetCurrencies<
    TData = Awaited<ReturnType<typeof getCurrencies>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params: undefined | GetCurrenciesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrencies>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrencies>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrencies<
    TData = Awaited<ReturnType<typeof getCurrencies>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCurrenciesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrencies>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrencies>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrencies<
    TData = Awaited<ReturnType<typeof getCurrencies>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCurrenciesParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List current currencies
 */

export function useGetCurrencies<
    TData = Awaited<ReturnType<typeof getCurrencies>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCurrenciesParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetCurrenciesQueryOptions(params, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Create a new currency with the specified details
 * @summary Create a new currency
 */
export const postCurrencies = (createCurrencyRequest: CreateCurrencyRequest, signal?: AbortSignal) => {
    return fetcher<PostCurrencies201>({
        url: `/currencies`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createCurrencyRequest,
        signal,
    });
};

export const getPostCurrenciesMutationOptions = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postCurrencies>>,
        TError,
        { data: CreateCurrencyRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postCurrencies>>,
    TError,
    { data: CreateCurrencyRequest },
    TContext
> => {
    const mutationKey = ['postCurrencies'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postCurrencies>>,
        { data: CreateCurrencyRequest }
    > = props => {
        const { data } = props ?? {};

        return postCurrencies(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostCurrenciesMutationResult = NonNullable<Awaited<ReturnType<typeof postCurrencies>>>;
export type PostCurrenciesMutationBody = CreateCurrencyRequest;
export type PostCurrenciesMutationError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

/**
 * @summary Create a new currency
 */
export const usePostCurrencies = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof postCurrencies>>,
            TError,
            { data: CreateCurrencyRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postCurrencies>>, TError, { data: CreateCurrencyRequest }, TContext> => {
    const mutationOptions = getPostCurrenciesMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve the current version of a currency by its ISO code
 * @summary Get currency by ISO code
 */
export const getCurrenciesIsoCode = ({ isoCode }: GetCurrenciesIsoCodePathParameters, signal?: AbortSignal) => {
    return fetcher<GetCurrenciesIsoCode200>({ url: `/currencies/${isoCode}`, method: 'GET', signal });
};

export const getGetCurrenciesIsoCodeQueryKey = ({ isoCode }: GetCurrenciesIsoCodePathParameters) => {
    return [`/currencies/${isoCode}`] as const;
};

export const getGetCurrenciesIsoCodeQueryOptions = <
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCurrenciesIsoCodePathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCode>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCurrenciesIsoCodeQueryKey({ isoCode });

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrenciesIsoCode>>> = ({ signal }) =>
        getCurrenciesIsoCode({ isoCode }, signal);

    return { queryKey, queryFn, enabled: !!isoCode, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrenciesIsoCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrenciesIsoCode>>>;
export type GetCurrenciesIsoCodeQueryError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

export function useGetCurrenciesIsoCode<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCurrenciesIsoCodePathParameters,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCode>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrenciesIsoCode>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrenciesIsoCode<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCurrenciesIsoCodePathParameters,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCode>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrenciesIsoCode>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrenciesIsoCode<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCurrenciesIsoCodePathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCode>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get currency by ISO code
 */

export function useGetCurrenciesIsoCode<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCurrenciesIsoCodePathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCode>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetCurrenciesIsoCodeQueryOptions({ isoCode }, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Update a currency (creates new version)
 * @summary Update currency
 */
export const putCurrenciesIsoCode = (
    { isoCode }: PutCurrenciesIsoCodePathParameters,
    updateCurrencyRequest: UpdateCurrencyRequest,
) => {
    return fetcher<PutCurrenciesIsoCode200>({
        url: `/currencies/${isoCode}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateCurrencyRequest,
    });
};

export const getPutCurrenciesIsoCodeMutationOptions = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putCurrenciesIsoCode>>,
        TError,
        { pathParams: PutCurrenciesIsoCodePathParameters; data: UpdateCurrencyRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putCurrenciesIsoCode>>,
    TError,
    { pathParams: PutCurrenciesIsoCodePathParameters; data: UpdateCurrencyRequest },
    TContext
> => {
    const mutationKey = ['putCurrenciesIsoCode'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putCurrenciesIsoCode>>,
        { pathParams: PutCurrenciesIsoCodePathParameters; data: UpdateCurrencyRequest }
    > = props => {
        const { pathParams, data } = props ?? {};

        return putCurrenciesIsoCode(pathParams, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutCurrenciesIsoCodeMutationResult = NonNullable<Awaited<ReturnType<typeof putCurrenciesIsoCode>>>;
export type PutCurrenciesIsoCodeMutationBody = UpdateCurrencyRequest;
export type PutCurrenciesIsoCodeMutationError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

/**
 * @summary Update currency
 */
export const usePutCurrenciesIsoCode = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof putCurrenciesIsoCode>>,
            TError,
            { pathParams: PutCurrenciesIsoCodePathParameters; data: UpdateCurrencyRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof putCurrenciesIsoCode>>,
    TError,
    { pathParams: PutCurrenciesIsoCodePathParameters; data: UpdateCurrencyRequest },
    TContext
> => {
    const mutationOptions = getPutCurrenciesIsoCodeMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Archive a currency (marks as inactive)
 * @summary Archive currency
 */
export const deleteCurrenciesIsoCode = ({ isoCode }: DeleteCurrenciesIsoCodePathParameters) => {
    return fetcher<DeleteCurrenciesIsoCode200>({ url: `/currencies/${isoCode}`, method: 'DELETE' });
};

export const getDeleteCurrenciesIsoCodeMutationOptions = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteCurrenciesIsoCode>>,
        TError,
        { pathParams: DeleteCurrenciesIsoCodePathParameters },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteCurrenciesIsoCode>>,
    TError,
    { pathParams: DeleteCurrenciesIsoCodePathParameters },
    TContext
> => {
    const mutationKey = ['deleteCurrenciesIsoCode'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteCurrenciesIsoCode>>,
        { pathParams: DeleteCurrenciesIsoCodePathParameters }
    > = props => {
        const { pathParams } = props ?? {};

        return deleteCurrenciesIsoCode(pathParams);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteCurrenciesIsoCodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCurrenciesIsoCode>>>;

export type DeleteCurrenciesIsoCodeMutationError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

/**
 * @summary Archive currency
 */
export const useDeleteCurrenciesIsoCode = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof deleteCurrenciesIsoCode>>,
            TError,
            { pathParams: DeleteCurrenciesIsoCodePathParameters },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof deleteCurrenciesIsoCode>>,
    TError,
    { pathParams: DeleteCurrenciesIsoCodePathParameters },
    TContext
> => {
    const mutationOptions = getDeleteCurrenciesIsoCodeMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve the version history of a currency
 * @summary Get currency history
 */
export const getCurrenciesIsoCodeHistory = (
    { isoCode }: GetCurrenciesIsoCodeHistoryPathParameters,
    params?: GetCurrenciesIsoCodeHistoryParams,
    signal?: AbortSignal,
) => {
    return fetcher<GetCurrenciesIsoCodeHistory200>({
        url: `/currencies/${isoCode}/history`,
        method: 'GET',
        params,
        signal,
    });
};

export const getGetCurrenciesIsoCodeHistoryQueryKey = (
    { isoCode }: GetCurrenciesIsoCodeHistoryPathParameters,
    params?: GetCurrenciesIsoCodeHistoryParams,
) => {
    return [`/currencies/${isoCode}/history`, ...(params ? [params] : [])] as const;
};

export const getGetCurrenciesIsoCodeHistoryQueryOptions = <
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCurrenciesIsoCodeHistoryPathParameters,
    params?: GetCurrenciesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCurrenciesIsoCodeHistoryQueryKey({ isoCode }, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>> = ({ signal }) =>
        getCurrenciesIsoCodeHistory({ isoCode }, params, signal);

    return { queryKey, queryFn, enabled: !!isoCode, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrenciesIsoCodeHistoryQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>
>;
export type GetCurrenciesIsoCodeHistoryQueryError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

export function useGetCurrenciesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCurrenciesIsoCodeHistoryPathParameters,
    params: undefined | GetCurrenciesIsoCodeHistoryParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrenciesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCurrenciesIsoCodeHistoryPathParameters,
    params?: GetCurrenciesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrenciesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCurrenciesIsoCodeHistoryPathParameters,
    params?: GetCurrenciesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get currency history
 */

export function useGetCurrenciesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCurrenciesIsoCodeHistoryPathParameters,
    params?: GetCurrenciesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrenciesIsoCodeHistory>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetCurrenciesIsoCodeHistoryQueryOptions({ isoCode }, params, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Retrieve a paginated list of all current (active) countries
 * @summary List current countries
 */
export const getCountries = (params?: GetCountriesParams, signal?: AbortSignal) => {
    return fetcher<GetCountries200>({ url: `/countries`, method: 'GET', params, signal });
};

export const getGetCountriesQueryKey = (params?: GetCountriesParams) => {
    return [`/countries`, ...(params ? [params] : [])] as const;
};

export const getGetCountriesQueryOptions = <
    TData = Awaited<ReturnType<typeof getCountries>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCountriesParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCountriesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountries>>> = ({ signal }) =>
        getCountries(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCountries>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCountriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCountries>>>;
export type GetCountriesQueryError = BadRequestResponse | InternalServerErrorResponse;

export function useGetCountries<
    TData = Awaited<ReturnType<typeof getCountries>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params: undefined | GetCountriesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountries>>,
                    TError,
                    Awaited<ReturnType<typeof getCountries>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountries<
    TData = Awaited<ReturnType<typeof getCountries>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCountriesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountries>>,
                    TError,
                    Awaited<ReturnType<typeof getCountries>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountries<
    TData = Awaited<ReturnType<typeof getCountries>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCountriesParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List current countries
 */

export function useGetCountries<
    TData = Awaited<ReturnType<typeof getCountries>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetCountriesParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetCountriesQueryOptions(params, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Create a new country with the specified details
 * @summary Create a new country
 */
export const postCountries = (createCountryRequest: CreateCountryRequest, signal?: AbortSignal) => {
    return fetcher<PostCountries201>({
        url: `/countries`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createCountryRequest,
        signal,
    });
};

export const getPostCountriesMutationOptions = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postCountries>>,
        TError,
        { data: CreateCountryRequest },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof postCountries>>, TError, { data: CreateCountryRequest }, TContext> => {
    const mutationKey = ['postCountries'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postCountries>>,
        { data: CreateCountryRequest }
    > = props => {
        const { data } = props ?? {};

        return postCountries(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostCountriesMutationResult = NonNullable<Awaited<ReturnType<typeof postCountries>>>;
export type PostCountriesMutationBody = CreateCountryRequest;
export type PostCountriesMutationError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

/**
 * @summary Create a new country
 */
export const usePostCountries = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof postCountries>>,
            TError,
            { data: CreateCountryRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof postCountries>>, TError, { data: CreateCountryRequest }, TContext> => {
    const mutationOptions = getPostCountriesMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve the current version of a country by its ISO code
 * @summary Get country by ISO code
 */
export const getCountriesIsoCode = ({ isoCode }: GetCountriesIsoCodePathParameters, signal?: AbortSignal) => {
    return fetcher<GetCountriesIsoCode200>({ url: `/countries/${isoCode}`, method: 'GET', signal });
};

export const getGetCountriesIsoCodeQueryKey = ({ isoCode }: GetCountriesIsoCodePathParameters) => {
    return [`/countries/${isoCode}`] as const;
};

export const getGetCountriesIsoCodeQueryOptions = <
    TData = Awaited<ReturnType<typeof getCountriesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCountriesIsoCodePathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCode>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCountriesIsoCodeQueryKey({ isoCode });

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountriesIsoCode>>> = ({ signal }) =>
        getCountriesIsoCode({ isoCode }, signal);

    return { queryKey, queryFn, enabled: !!isoCode, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesIsoCode>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCountriesIsoCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getCountriesIsoCode>>>;
export type GetCountriesIsoCodeQueryError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

export function useGetCountriesIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesIsoCodePathParameters,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCode>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountriesIsoCode>>,
                    TError,
                    Awaited<ReturnType<typeof getCountriesIsoCode>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountriesIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesIsoCodePathParameters,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCode>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountriesIsoCode>>,
                    TError,
                    Awaited<ReturnType<typeof getCountriesIsoCode>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountriesIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesIsoCodePathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCode>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get country by ISO code
 */

export function useGetCountriesIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCountriesIsoCodePathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCode>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetCountriesIsoCodeQueryOptions({ isoCode }, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Update a country (creates new version)
 * @summary Update country
 */
export const putCountriesIsoCode = (
    { isoCode }: PutCountriesIsoCodePathParameters,
    updateCountryRequest: UpdateCountryRequest,
) => {
    return fetcher<PutCountriesIsoCode200>({
        url: `/countries/${isoCode}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateCountryRequest,
    });
};

export const getPutCountriesIsoCodeMutationOptions = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putCountriesIsoCode>>,
        TError,
        { pathParams: PutCountriesIsoCodePathParameters; data: UpdateCountryRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putCountriesIsoCode>>,
    TError,
    { pathParams: PutCountriesIsoCodePathParameters; data: UpdateCountryRequest },
    TContext
> => {
    const mutationKey = ['putCountriesIsoCode'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putCountriesIsoCode>>,
        { pathParams: PutCountriesIsoCodePathParameters; data: UpdateCountryRequest }
    > = props => {
        const { pathParams, data } = props ?? {};

        return putCountriesIsoCode(pathParams, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutCountriesIsoCodeMutationResult = NonNullable<Awaited<ReturnType<typeof putCountriesIsoCode>>>;
export type PutCountriesIsoCodeMutationBody = UpdateCountryRequest;
export type PutCountriesIsoCodeMutationError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

/**
 * @summary Update country
 */
export const usePutCountriesIsoCode = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof putCountriesIsoCode>>,
            TError,
            { pathParams: PutCountriesIsoCodePathParameters; data: UpdateCountryRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof putCountriesIsoCode>>,
    TError,
    { pathParams: PutCountriesIsoCodePathParameters; data: UpdateCountryRequest },
    TContext
> => {
    const mutationOptions = getPutCountriesIsoCodeMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Archive a country (marks as inactive)
 * @summary Archive country
 */
export const deleteCountriesIsoCode = ({ isoCode }: DeleteCountriesIsoCodePathParameters) => {
    return fetcher<DeleteCountriesIsoCode200>({ url: `/countries/${isoCode}`, method: 'DELETE' });
};

export const getDeleteCountriesIsoCodeMutationOptions = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteCountriesIsoCode>>,
        TError,
        { pathParams: DeleteCountriesIsoCodePathParameters },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountriesIsoCode>>,
    TError,
    { pathParams: DeleteCountriesIsoCodePathParameters },
    TContext
> => {
    const mutationKey = ['deleteCountriesIsoCode'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteCountriesIsoCode>>,
        { pathParams: DeleteCountriesIsoCodePathParameters }
    > = props => {
        const { pathParams } = props ?? {};

        return deleteCountriesIsoCode(pathParams);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteCountriesIsoCodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCountriesIsoCode>>>;

export type DeleteCountriesIsoCodeMutationError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

/**
 * @summary Archive country
 */
export const useDeleteCountriesIsoCode = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof deleteCountriesIsoCode>>,
            TError,
            { pathParams: DeleteCountriesIsoCodePathParameters },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof deleteCountriesIsoCode>>,
    TError,
    { pathParams: DeleteCountriesIsoCodePathParameters },
    TContext
> => {
    const mutationOptions = getDeleteCountriesIsoCodeMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve the version history of a country
 * @summary Get country history
 */
export const getCountriesIsoCodeHistory = (
    { isoCode }: GetCountriesIsoCodeHistoryPathParameters,
    params?: GetCountriesIsoCodeHistoryParams,
    signal?: AbortSignal,
) => {
    return fetcher<GetCountriesIsoCodeHistory200>({
        url: `/countries/${isoCode}/history`,
        method: 'GET',
        params,
        signal,
    });
};

export const getGetCountriesIsoCodeHistoryQueryKey = (
    { isoCode }: GetCountriesIsoCodeHistoryPathParameters,
    params?: GetCountriesIsoCodeHistoryParams,
) => {
    return [`/countries/${isoCode}/history`, ...(params ? [params] : [])] as const;
};

export const getGetCountriesIsoCodeHistoryQueryOptions = <
    TData = Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCountriesIsoCodeHistoryPathParameters,
    params?: GetCountriesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetCountriesIsoCodeHistoryQueryKey({ isoCode }, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>> = ({ signal }) =>
        getCountriesIsoCodeHistory({ isoCode }, params, signal);

    return { queryKey, queryFn, enabled: !!isoCode, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCountriesIsoCodeHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>>;
export type GetCountriesIsoCodeHistoryQueryError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

export function useGetCountriesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesIsoCodeHistoryPathParameters,
    params: undefined | GetCountriesIsoCodeHistoryParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
                    TError,
                    Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountriesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesIsoCodeHistoryPathParameters,
    params?: GetCountriesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
                    TError,
                    Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountriesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesIsoCodeHistoryPathParameters,
    params?: GetCountriesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get country history
 */

export function useGetCountriesIsoCodeHistory<
    TData = Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { isoCode }: GetCountriesIsoCodeHistoryPathParameters,
    params?: GetCountriesIsoCodeHistoryParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCountriesIsoCodeHistory>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetCountriesIsoCodeHistoryQueryOptions({ isoCode }, params, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Retrieve a paginated list of countries that use a specific currency
 * @summary List countries by currency
 */
export const getCountriesCurrencyCurrencyIsoCode = (
    { currencyIsoCode }: GetCountriesCurrencyCurrencyIsoCodePathParameters,
    params?: GetCountriesCurrencyCurrencyIsoCodeParams,
    signal?: AbortSignal,
) => {
    return fetcher<GetCountriesCurrencyCurrencyIsoCode200>({
        url: `/countries/currency/${currencyIsoCode}`,
        method: 'GET',
        params,
        signal,
    });
};

export const getGetCountriesCurrencyCurrencyIsoCodeQueryKey = (
    { currencyIsoCode }: GetCountriesCurrencyCurrencyIsoCodePathParameters,
    params?: GetCountriesCurrencyCurrencyIsoCodeParams,
) => {
    return [`/countries/currency/${currencyIsoCode}`, ...(params ? [params] : [])] as const;
};

export const getGetCountriesCurrencyCurrencyIsoCodeQueryOptions = <
    TData = Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { currencyIsoCode }: GetCountriesCurrencyCurrencyIsoCodePathParameters,
    params?: GetCountriesCurrencyCurrencyIsoCodeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetCountriesCurrencyCurrencyIsoCodeQueryKey({ currencyIsoCode }, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>> = ({ signal }) =>
        getCountriesCurrencyCurrencyIsoCode({ currencyIsoCode }, params, signal);

    return { queryKey, queryFn, enabled: !!currencyIsoCode, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCountriesCurrencyCurrencyIsoCodeQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>
>;
export type GetCountriesCurrencyCurrencyIsoCodeQueryError =
    | BadRequestResponse
    | ErrorResponse
    | InternalServerErrorResponse;

export function useGetCountriesCurrencyCurrencyIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesCurrencyCurrencyIsoCodePathParameters,
    params: undefined | GetCountriesCurrencyCurrencyIsoCodeParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
                    TError,
                    Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountriesCurrencyCurrencyIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesCurrencyCurrencyIsoCodePathParameters,
    params?: GetCountriesCurrencyCurrencyIsoCodeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
                    TError,
                    Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCountriesCurrencyCurrencyIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetCountriesCurrencyCurrencyIsoCodePathParameters,
    params?: GetCountriesCurrencyCurrencyIsoCodeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>, TError, TData>
        >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List countries by currency
 */

export function useGetCountriesCurrencyCurrencyIsoCode<
    TData = Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { currencyIsoCode }: GetCountriesCurrencyCurrencyIsoCodePathParameters,
    params?: GetCountriesCurrencyCurrencyIsoCodeParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getCountriesCurrencyCurrencyIsoCode>>, TError, TData>
        >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetCountriesCurrencyCurrencyIsoCodeQueryOptions({ currencyIsoCode }, params, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Retrieve a paginated list of notifications with optional filtering
 * @summary Get all notifications
 */
export const getNotifications = (params?: GetNotificationsParams, signal?: AbortSignal) => {
    return fetcher<GetNotifications200>({ url: `/notifications`, method: 'GET', params, signal });
};

export const getGetNotificationsQueryKey = (params?: GetNotificationsParams) => {
    return [`/notifications`, ...(params ? [params] : [])] as const;
};

export const getGetNotificationsQueryOptions = <
    TData = Awaited<ReturnType<typeof getNotifications>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetNotificationsParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetNotificationsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotifications>>> = ({ signal }) =>
        getNotifications(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getNotifications>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotifications>>>;
export type GetNotificationsQueryError = BadRequestResponse | InternalServerErrorResponse;

export function useGetNotifications<
    TData = Awaited<ReturnType<typeof getNotifications>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params: undefined | GetNotificationsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotifications>>,
                    TError,
                    Awaited<ReturnType<typeof getNotifications>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotifications<
    TData = Awaited<ReturnType<typeof getNotifications>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetNotificationsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotifications>>,
                    TError,
                    Awaited<ReturnType<typeof getNotifications>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotifications<
    TData = Awaited<ReturnType<typeof getNotifications>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetNotificationsParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all notifications
 */

export function useGetNotifications<
    TData = Awaited<ReturnType<typeof getNotifications>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    params?: GetNotificationsParams,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetNotificationsQueryOptions(params, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Get the count of unread notifications with optional filtering
 * @summary Get unread notifications count
 */
export const getNotificationsUnreadCount = (params?: GetNotificationsUnreadCountParams, signal?: AbortSignal) => {
    return fetcher<GetNotificationsUnreadCount200>({
        url: `/notifications/unread-count`,
        method: 'GET',
        params,
        signal,
    });
};

export const getGetNotificationsUnreadCountQueryKey = (params?: GetNotificationsUnreadCountParams) => {
    return [`/notifications/unread-count`, ...(params ? [params] : [])] as const;
};

export const getGetNotificationsUnreadCountQueryOptions = <
    TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
    TError = InternalServerErrorResponse,
>(
    params?: GetNotificationsUnreadCountParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetNotificationsUnreadCountQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationsUnreadCount>>> = ({ signal }) =>
        getNotificationsUnreadCount(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationsUnreadCountQueryResult = NonNullable<
    Awaited<ReturnType<typeof getNotificationsUnreadCount>>
>;
export type GetNotificationsUnreadCountQueryError = InternalServerErrorResponse;

export function useGetNotificationsUnreadCount<
    TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
    TError = InternalServerErrorResponse,
>(
    params: undefined | GetNotificationsUnreadCountParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
                    TError,
                    Awaited<ReturnType<typeof getNotificationsUnreadCount>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotificationsUnreadCount<
    TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
    TError = InternalServerErrorResponse,
>(
    params?: GetNotificationsUnreadCountParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
                    TError,
                    Awaited<ReturnType<typeof getNotificationsUnreadCount>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotificationsUnreadCount<
    TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
    TError = InternalServerErrorResponse,
>(
    params?: GetNotificationsUnreadCountParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get unread notifications count
 */

export function useGetNotificationsUnreadCount<
    TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
    TError = InternalServerErrorResponse,
>(
    params?: GetNotificationsUnreadCountParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetNotificationsUnreadCountQueryOptions(params, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Retrieve a specific notification by its ID
 * @summary Get notification by ID
 */
export const getNotificationsId = ({ id }: GetNotificationsIdPathParameters, signal?: AbortSignal) => {
    return fetcher<GetNotificationsId200>({ url: `/notifications/${id}`, method: 'GET', signal });
};

export const getGetNotificationsIdQueryKey = ({ id }: GetNotificationsIdPathParameters) => {
    return [`/notifications/${id}`] as const;
};

export const getGetNotificationsIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getNotificationsId>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { id }: GetNotificationsIdPathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsId>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetNotificationsIdQueryKey({ id });

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationsId>>> = ({ signal }) =>
        getNotificationsId({ id }, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationsId>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationsId>>>;
export type GetNotificationsIdQueryError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

export function useGetNotificationsId<
    TData = Awaited<ReturnType<typeof getNotificationsId>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetNotificationsIdPathParameters,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsId>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotificationsId>>,
                    TError,
                    Awaited<ReturnType<typeof getNotificationsId>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotificationsId<
    TData = Awaited<ReturnType<typeof getNotificationsId>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetNotificationsIdPathParameters,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsId>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotificationsId>>,
                    TError,
                    Awaited<ReturnType<typeof getNotificationsId>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotificationsId<
    TData = Awaited<ReturnType<typeof getNotificationsId>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    pathParams: GetNotificationsIdPathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsId>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get notification by ID
 */

export function useGetNotificationsId<
    TData = Awaited<ReturnType<typeof getNotificationsId>>,
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
>(
    { id }: GetNotificationsIdPathParameters,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsId>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetNotificationsIdQueryOptions({ id }, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Delete a specific notification by its ID
 * @summary Delete notification
 */
export const deleteNotificationsId = ({ id }: DeleteNotificationsIdPathParameters) => {
    return fetcher<DeleteNotificationsId200>({ url: `/notifications/${id}`, method: 'DELETE' });
};

export const getDeleteNotificationsIdMutationOptions = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteNotificationsId>>,
        TError,
        { pathParams: DeleteNotificationsIdPathParameters },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteNotificationsId>>,
    TError,
    { pathParams: DeleteNotificationsIdPathParameters },
    TContext
> => {
    const mutationKey = ['deleteNotificationsId'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteNotificationsId>>,
        { pathParams: DeleteNotificationsIdPathParameters }
    > = props => {
        const { pathParams } = props ?? {};

        return deleteNotificationsId(pathParams);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteNotificationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNotificationsId>>>;

export type DeleteNotificationsIdMutationError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse;

/**
 * @summary Delete notification
 */
export const useDeleteNotificationsId = <
    TError = BadRequestResponse | ErrorResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof deleteNotificationsId>>,
            TError,
            { pathParams: DeleteNotificationsIdPathParameters },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof deleteNotificationsId>>,
    TError,
    { pathParams: DeleteNotificationsIdPathParameters },
    TContext
> => {
    const mutationOptions = getDeleteNotificationsIdMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve notifications for a specific entity
 * @summary Get notifications by entity
 */
export const getNotificationsEntityEntityTypeEntityIdentifier = (
    { entityType, entityIdentifier }: GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    params?: GetNotificationsEntityEntityTypeEntityIdentifierParams,
    signal?: AbortSignal,
) => {
    return fetcher<GetNotificationsEntityEntityTypeEntityIdentifier200>({
        url: `/notifications/entity/${entityType}/${entityIdentifier}`,
        method: 'GET',
        params,
        signal,
    });
};

export const getGetNotificationsEntityEntityTypeEntityIdentifierQueryKey = (
    { entityType, entityIdentifier }: GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    params?: GetNotificationsEntityEntityTypeEntityIdentifierParams,
) => {
    return [`/notifications/entity/${entityType}/${entityIdentifier}`, ...(params ? [params] : [])] as const;
};

export const getGetNotificationsEntityEntityTypeEntityIdentifierQueryOptions = <
    TData = Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    { entityType, entityIdentifier }: GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    params?: GetNotificationsEntityEntityTypeEntityIdentifierParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetNotificationsEntityEntityTypeEntityIdentifierQueryKey({ entityType, entityIdentifier }, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>> = ({
        signal,
    }) => getNotificationsEntityEntityTypeEntityIdentifier({ entityType, entityIdentifier }, params, signal);

    return { queryKey, queryFn, enabled: !!(entityType && entityIdentifier), ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationsEntityEntityTypeEntityIdentifierQueryResult = NonNullable<
    Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>
>;
export type GetNotificationsEntityEntityTypeEntityIdentifierQueryError =
    | BadRequestResponse
    | InternalServerErrorResponse;

export function useGetNotificationsEntityEntityTypeEntityIdentifier<
    TData = Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    pathParams: GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    params: undefined | GetNotificationsEntityEntityTypeEntityIdentifierParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
                    TError,
                    Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotificationsEntityEntityTypeEntityIdentifier<
    TData = Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    pathParams: GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    params?: GetNotificationsEntityEntityTypeEntityIdentifierParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
                    TError,
                    Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNotificationsEntityEntityTypeEntityIdentifier<
    TData = Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    pathParams: GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    params?: GetNotificationsEntityEntityTypeEntityIdentifierParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>, TError, TData>
        >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get notifications by entity
 */

export function useGetNotificationsEntityEntityTypeEntityIdentifier<
    TData = Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>,
    TError = BadRequestResponse | InternalServerErrorResponse,
>(
    { entityType, entityIdentifier }: GetNotificationsEntityEntityTypeEntityIdentifierPathParameters,
    params?: GetNotificationsEntityEntityTypeEntityIdentifierParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getNotificationsEntityEntityTypeEntityIdentifier>>, TError, TData>
        >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetNotificationsEntityEntityTypeEntityIdentifierQueryOptions(
        { entityType, entityIdentifier },
        params,
        options,
    );

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Mark specific notifications as read
 * @summary Mark notifications as read
 */
export const putNotificationsMarkRead = (markAsReadRequest: MarkAsReadRequest) => {
    return fetcher<PutNotificationsMarkRead200>({
        url: `/notifications/mark-read`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: markAsReadRequest,
    });
};

export const getPutNotificationsMarkReadMutationOptions = <
    TError = BadRequestResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putNotificationsMarkRead>>,
        TError,
        { data: MarkAsReadRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putNotificationsMarkRead>>,
    TError,
    { data: MarkAsReadRequest },
    TContext
> => {
    const mutationKey = ['putNotificationsMarkRead'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putNotificationsMarkRead>>,
        { data: MarkAsReadRequest }
    > = props => {
        const { data } = props ?? {};

        return putNotificationsMarkRead(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutNotificationsMarkReadMutationResult = NonNullable<Awaited<ReturnType<typeof putNotificationsMarkRead>>>;
export type PutNotificationsMarkReadMutationBody = MarkAsReadRequest;
export type PutNotificationsMarkReadMutationError = BadRequestResponse | InternalServerErrorResponse;

/**
 * @summary Mark notifications as read
 */
export const usePutNotificationsMarkRead = <
    TError = BadRequestResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof putNotificationsMarkRead>>,
            TError,
            { data: MarkAsReadRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof putNotificationsMarkRead>>,
    TError,
    { data: MarkAsReadRequest },
    TContext
> => {
    const mutationOptions = getPutNotificationsMarkReadMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

/**
 * Mark all notifications as read with optional filtering
 * @summary Mark all notifications as read
 */
export const putNotificationsMarkAllRead = (markAllAsReadRequest: MarkAllAsReadRequest) => {
    return fetcher<PutNotificationsMarkAllRead200>({
        url: `/notifications/mark-all-read`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: markAllAsReadRequest,
    });
};

export const getPutNotificationsMarkAllReadMutationOptions = <
    TError = BadRequestResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putNotificationsMarkAllRead>>,
        TError,
        { data: MarkAllAsReadRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putNotificationsMarkAllRead>>,
    TError,
    { data: MarkAllAsReadRequest },
    TContext
> => {
    const mutationKey = ['putNotificationsMarkAllRead'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putNotificationsMarkAllRead>>,
        { data: MarkAllAsReadRequest }
    > = props => {
        const { data } = props ?? {};

        return putNotificationsMarkAllRead(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutNotificationsMarkAllReadMutationResult = NonNullable<
    Awaited<ReturnType<typeof putNotificationsMarkAllRead>>
>;
export type PutNotificationsMarkAllReadMutationBody = MarkAllAsReadRequest;
export type PutNotificationsMarkAllReadMutationError = BadRequestResponse | InternalServerErrorResponse;

/**
 * @summary Mark all notifications as read
 */
export const usePutNotificationsMarkAllRead = <
    TError = BadRequestResponse | InternalServerErrorResponse,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof putNotificationsMarkAllRead>>,
            TError,
            { data: MarkAllAsReadRequest },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof putNotificationsMarkAllRead>>,
    TError,
    { data: MarkAllAsReadRequest },
    TContext
> => {
    const mutationOptions = getPutNotificationsMarkAllReadMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};
